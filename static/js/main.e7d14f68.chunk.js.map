{"version":3,"sources":["PlanetList.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["PlanetList","planets","console","log","renderPlanets","map","planet","index","className","key","name","terrain","population","App","this","props","onGetPlanets","isPending","type","onClick","React","Component","connect","state","error","dispatch","fetch","then","resp","json","res","payload","results","catch","err","Boolean","window","location","hostname","match","initialState","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","Object","assign","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gUAqBeA,G,MAlBI,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpBC,QAAQC,IAAI,UAAWF,GACvB,IAAMG,EAAgBH,EAAQI,KAAI,SAACC,EAAQC,GAC1C,OACC,yBAAKC,UAAU,sBAAsBC,IAAKF,GACzC,oCAAUD,EAAOI,MACjB,uCAAaJ,EAAOK,SACpB,yCAAeL,EAAOM,gBAIzB,OACC,yBAAKJ,UAAU,uBACbJ,KCIES,G,6KACM,IAAD,EACoCC,KAAKC,MAAzCC,EADA,EACAA,aAAcf,EADd,EACcA,QAASgB,EADvB,EACuBA,UAC9B,OACI,yBAAKT,UAAU,OACb,oDACA,4BAAQU,KAAK,SAASC,QAASH,GAA/B,qBACCC,EACC,0CACA,kBAAC,EAAD,CAAYhB,QAASA,S,GATfmB,IAAMC,YAgBTC,eA9BS,SAACC,GACvB,MAAO,CACLtB,QAASsB,EAAMtB,QACfgB,UAAWM,EAAMN,UACjBO,MAAOD,EAAMC,UAIU,SAACC,GAC1B,MAAO,CACLT,aAAc,kBAAMS,GCVQ,SAACA,GAChCA,EAAS,CAACP,KCPwB,wBDQlCQ,MAAM,gCACJC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAG,OAAIL,EAAS,CAACP,KCTU,sBDSiBa,QAASD,EAAIE,aAC9DC,OAAM,SAAAC,GAAG,OAAIT,EAAS,CAACP,KCTQ,qBDSkBa,QAASG,cDyB9CZ,CAA6CT,GGxBxCsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAe,CACpBvC,QAAS,GACTgB,WAAW,EACXO,MAAO,ICCFiB,EAAkBL,OAAOM,sCAAwCC,IACjEC,EAAQC,aDCW,WAAoC,IAAnCtB,EAAkC,uDAA5BiB,EAAcM,EAAc,uDAAP,GACpD,OAAOA,EAAO5B,MACb,IFdiC,sBEehC,OAAO6B,OAAOC,OAAO,GAAIzB,EAAO,CAACN,WAAW,IAC7C,IFfiC,sBEgBhC,OAAO8B,OAAOC,OAAO,GAAIzB,EAAO,CAACN,WAAW,EAAOhB,QAAS6C,EAAOf,UACpE,IFhBgC,qBEiB/B,OAAOgB,OAAOC,OAAO,GAAIzB,EAAO,CAACN,WAAW,EAAOO,MAAOsB,EAAOf,UAClE,QACC,OAAOR,KCRTkB,EACCQ,YAAgBC,OAIlBC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,OAEFS,SAASC,eAAe,SF6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd1B,OAAM,SAAAT,GACLtB,QAAQsB,MAAMA,EAAMoC,c","file":"static/js/main.e7d14f68.chunk.js","sourcesContent":["import React from 'react'\r\nimport './PlanetList.css'\r\n\r\nconst PlanetList = ({planets}) => {\r\n\tconsole.log(\"planets\", planets)\r\n\tconst renderPlanets = planets.map((planet, index) => {\r\n\t\treturn (\r\n\t\t\t<div className='planetCardContainer' key={index}>\r\n\t\t\t\t<p>Name: {planet.name}</p>\r\n\t\t\t\t<p>Terrain: {planet.terrain}</p>\r\n\t\t\t\t<p>Einwohner: {planet.population}</p>\r\n\t\t\t</div>\r\n\t\t)\r\n\t})\r\n\treturn (\r\n\t\t<div className='planetListContainer'>\r\n\t\t\t{renderPlanets}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default PlanetList","import React from 'react';\nimport { connect } from 'react-redux'\nimport PlanetList from './PlanetList'\nimport './App.css';\nimport { getPlanets } from './actions'\n\nconst mapStateToProps = (state) => {\n  return {\n    planets: state.planets,\n    isPending: state.isPending,\n    error: state.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onGetPlanets: () => dispatch(getPlanets())\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    const {onGetPlanets, planets, isPending} = this.props\n    return (\n        <div className=\"app\">\n          <header>Star Wars Webapp</header>\n          <button type=\"button\" onClick={onGetPlanets}>Planeten erzeugen</button>\n          {isPending ? \n            <p>Loading ...</p> :\n            <PlanetList planets={planets} />\n          }\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tGET_PLANETS_SUCCESS,\r\n\tGET_PLANETS_PENDING,\r\n\tGET_PLANETS_FAILED\r\n} from './constants'\r\n\r\nexport const getPlanets = () => (dispatch) => {\r\n\tdispatch({type: GET_PLANETS_PENDING})\r\n\tfetch('https://swapi.co/api/planets')\r\n\t\t.then(resp => resp.json())\r\n\t\t.then(res => dispatch({type: GET_PLANETS_SUCCESS, payload: res.results}))\r\n\t\t.catch(err => dispatch({type: GET_PLANETS_FAILED, payload: err}))\r\n}","export const GET_PLANETS_PENDING = 'GET_PLANETS_PENDING'\r\nexport const GET_PLANETS_SUCCESS = 'GET_PLANETS_SUCCESS'\r\nexport const GET_PLANETS_FAILED = 'GET_PLANETS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n\tGET_PLANETS_SUCCESS,\r\n\tGET_PLANETS_PENDING,\r\n\tGET_PLANETS_FAILED\r\n} from './constants'\r\n\r\nconst initialState = {\r\n\tplanets: [],\r\n\tisPending: false,\r\n\terror: ''\r\n}\r\n\r\nexport const getRobots = (state=initialState, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase GET_PLANETS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase GET_PLANETS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {isPending: false, planets: action.payload})\r\n\t\tcase GET_PLANETS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {isPending: false, error: action.payload})\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { getRobots } from './reducers'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(\n\tgetRobots,\n\tcomposeEnhancer(\n\t\tapplyMiddleware(thunkMiddleware)\n\t)\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}